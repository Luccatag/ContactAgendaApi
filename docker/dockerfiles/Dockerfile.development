# Use official .NET 8 SDK for building
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /app

# Copy only the main project file
COPY ContactAgendaApi.csproj ./
RUN dotnet restore

# Copy only source files needed for the main API (exclude test directories)
COPY Controllers/ ./Controllers/
COPY CQRS/ ./CQRS/
COPY DTOs/ ./DTOs/
COPY Interfaces/ ./Interfaces/
COPY Migrations/ ./Migrations/
COPY Models/ ./Models/
COPY Properties/ ./Properties/
COPY Repositories/ ./Repositories/
COPY Services/ ./Services/
COPY Validators/ ./Validators/
COPY Program.cs .
COPY MappingProfile.cs .
COPY appsettings*.json ./

# Build the application
RUN dotnet build -c Release --no-restore

# Publish the application
RUN dotnet publish -c Release --no-restore -o /app/publish

# Use official .NET 8 runtime for the final image
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS runtime
WORKDIR /app

# Install sqlite3 for database management
RUN apt-get update && apt-get install -y sqlite3 && rm -rf /var/lib/apt/lists/*

# Create a non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Create data directory for SQLite database
RUN mkdir -p /app/data && chown -R appuser:appuser /app/data

# Copy the published application
COPY --from=build /app/publish .

# Set ownership to appuser
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 5000

# Configure environment for development-like features in container
ENV ASPNETCORE_ENVIRONMENT=Development
ENV ASPNETCORE_URLS=http://+:5000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:5000/weatherforecast || exit 1

# Run the application
ENTRYPOINT ["dotnet", "ContactAgendaApi.dll"]
